import { PrismaClient, Prisma } from '@prisma/client';
import { Create<%= model.name %>Input, Update<%= model.name %>Input } from '../interfaces/<%= model.name.toLowerCase() %>.interface';

export class <%= model.name %>Service {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  async create(data: Create<%= model.name %>Input) {
    return this.prisma.<%= model.name.toLowerCase() %>.create({ 
      data: data as Prisma.<%= model.name %>CreateInput
    });
  }

  async findAll() {
    return this.prisma.<%= model.name.toLowerCase() %>.findMany();
  }

  async findById(id: string) {
    return this.prisma.<%= model.name.toLowerCase() %>.findUnique({ 
      where: { id } 
    });
  }

  async update(id: string, data: Update<%= model.name %>Input) {
    return this.prisma.<%= model.name.toLowerCase() %>.update({ 
      where: { id }, 
      data: data as Prisma.<%= model.name %>UpdateInput
    });
  }

  async delete(id: string) {
    return this.prisma.<%= model.name.toLowerCase() %>.delete({ 
      where: { id } 
    });
  }
}

export default new <%= model.name %>Service();