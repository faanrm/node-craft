import { Request, Response } from 'express';
import AuthService from '../services/auth.service';
import { UserModel } from '../models/user.model';

export class AuthController {
  async register(req: Request, res: Response) {
    try {
      const validatedData = UserModel.schema.parse(req.body);
      
      const user = await AuthService.register(validatedData);
      res.status(201).json({
        message: 'User registered successfully',
        user: {
          id: user.id,
          email: user.email,
          name: user.name,
          role: user.role
        }
      });
    } catch (error) {
      if (error.name === 'ZodError') {
        return res.status(400).json({ 
          message: 'Validation error', 
          errors: error.errors 
        });
      }
      res.status(400).json({ message: error.message });
    }
  }

  async login(req: Request, res: Response) {
    try {
      const validatedData = UserModel.loginSchema.parse(req.body);
      const { email, password } = validatedData;
      
      const result = await AuthService.login(email, password);
      
      res.status(200).json({
        message: 'Login successful',
        token: result.token,
        user: {
          id: result.user.id,
          email: result.user.email,
          name: result.user.name,
          role: result.user.role
        }
      });
    } catch (error) {
      if (error.name === 'ZodError') {
        return res.status(400).json({ 
          message: 'Validation error', 
          errors: error.errors 
        });
      }
      res.status(401).json({ message: error.message });
    }
  }

  async me(req: Request, res: Response) {
    try {
      if (!req.user) {
        return res.status(401).json({ message: 'Authentication required' });
      }
      
      const user = await AuthService.getUserById(req.user.id);
      
      res.status(200).json({
        user: {
          id: user.id,
          email: user.email,
          name: user.name,
          role: user.role
        }
      });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
}

export default new AuthController();