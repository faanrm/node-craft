import 'reflect-metadata';
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import dotenv from 'dotenv';
import { registerDependencies } from './infrastructure/container';

<% if (isAuth) { %>
import authRouter from './interface/http/routes/auth.routes';
import userRouter from './interface/http/routes/user.routes';
<% } %>
<% for (const model of models) { %>
<% if (model.name === "User" && !isAuth) { %>
import userRouter from './interface/http/routes/user.routes';
<% } else if (model.name !== "User") { %>
import <%= model.name.toLowerCase() %>Router from './interface/http/routes/<%= model.name.toLowerCase() %>.routes';
<% } %>
<% } %>

dotenv.config();

registerDependencies();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors());
app.use(helmet());
app.use(morgan('dev'));

<% if (isAuth) { %>
app.use('/api/auth', authRouter);
app.use('/api/users', userRouter);
<% } else { %>
<% let hasUserModel = models.some(model => model.name === "User"); %>
<% if (hasUserModel) { %>
app.use('/api/users', userRouter);
<% } %>
<% } %>

<% for (const model of models) { %>
<% if (model.name !== "User") { %>
app.use('/api/<%= model.name.toLowerCase() %>s', <%= model.name.toLowerCase() %>Router);
<% } %>
<% } %>

app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    message: '<%= projectName %> API is running',
    timestamp: new Date().toISOString()
  });
});

app.use((req, res) => {
  res.status(404).json({
    status: 'error',
    message: 'Endpoint not found',
    timestamp: new Date().toISOString()
  });
});

app.listen(PORT, () => {
  console.log(`<%= projectName %> API running on port ${PORT}`);
});

export default app;