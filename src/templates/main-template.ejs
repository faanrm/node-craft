import express from 'express';
import cors from 'cors';
import { Request, Response, NextFunction } from 'express';
import morgan from 'morgan';
import dotenv from 'dotenv';
import { errorHandler } from './middleware/error.middleware';
import { logger } from './utils/logger';
import config from './utils/config';
import { setupSwagger } from './utils/swagger';

<% if (isAuth) { %>
import authRouter from './routes/auth.routes';
import userRouter from './routes/user.routes';
<% } %>
<% for (const model of models) { %>
<% if (model.name === "User" && !isAuth) { %>
import userRouter from './routes/user.routes';
<% } else if (model.name !== "User") { %>
import <%= model.name.toLowerCase() %>Router from './routes/<%= model.name.toLowerCase() %>.routes';
<% } %>
<% } %>

dotenv.config();
const app = express();
const PORT = config.server.port;

setupSwagger(app);
app.use(morgan('combined', {
  stream: {
    write: (message: string) => {
      logger.info(message.trim());
    }
  }
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));


app.use(cors({
  origin: config.server.cors.origin,
  methods: config.server.cors.methods,
  credentials: true
}));



<% if (isAuth) { %>
app.use('/api/auth', authRouter);
app.use('/api/users', userRouter);
<% } else { %>
<% let hasUserModel = models.some(model => model.name === "User"); %>
<% if (hasUserModel) { %>
app.use('/api/users', userRouter);
<% } %>
<% } %>

<% for (const model of models) { %>
<% if (model.name !== "User") { %>
app.use('/api/<%= model.name.toLowerCase() %>s', <%= model.name.toLowerCase() %>Router);
<% } %>
<% } %>

app.get('/hello', (req: Request, res: Response) => {
  res.status(200).json({
    status: 'OK',
    message: '<%= projectName %> API is running',
    version: process.env.npm_package_version || '1.0.0',
    environment: config.server.env,
    timestamp: new Date().toISOString()
  });
});

app.use((req: Request, res: Response) => {
  res.status(404).json({
    status: 'error',
    message: 'Endpoint not found',
    path: req.originalUrl,
    timestamp: new Date().toISOString()
  });
});

app.use(errorHandler);


if (process.env.NODE_ENV !== 'test') {
  app.listen(PORT, () => {
    logger.info(`<%= projectName %> API running on port ${PORT} in ${config.server.env} mode`);
  });
}

export default app;