
import { <%= model.name %> } from '../../domain/entities/<%= model.name.toLowerCase() %>';
import { I<%= model.name %>Repository } from '../../domain/repositories/<%= model.name.toLowerCase() %>.repository';
import { Create<%= model.name %>DTO, Update<%= model.name %>DTO } from '../dtos/<%= model.name.toLowerCase() %>.dto';

export class <%= model.name %>UseCase {
  constructor(private readonly <%= model.name.toLowerCase() %>Repository: I<%= model.name %>Repository) {}

  async create(data: Create<%= model.name %>DTO): Promise<<%= model.name %>> {
    return this.<%= model.name.toLowerCase() %>Repository.create(data);
  }

  async findAll(): Promise<<%= model.name %>[]> {
    return this.<%= model.name.toLowerCase() %>Repository.findAll();
  }

  async findById(id: string): Promise<<%= model.name %> | null> {
    return this.<%= model.name.toLowerCase() %>Repository.findById(id);
  }

  async update(id: string, data: Update<%= model.name %>DTO): Promise<<%= model.name %>> {
    return this.<%= model.name.toLowerCase() %>Repository.update(id, data);
  }

  async delete(id: string): Promise<void> {
    return this.<%= model.name.toLowerCase() %>Repository.delete(id);
  }
}