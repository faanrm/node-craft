import { PrismaClient } from '@prisma/client';
import { z } from 'zod';

export class <%= model.name %>Model {
private prisma: PrismaClient;

static schema = z.object({
<% model.fields.forEach(function(field, index) { %>
<%= field.name %>: <%= getZodValidator(field) %><%= index < model.fields.length - 1 ? ',' : '' %>
<% }); %>
});
<% model.fields.forEach(function(field) { %>
<% if (field.enumName && field.enumValues) { %>
static <%= field.enumName %>Values = [<%= Object.values(field.enumValues).map(v => `"${v}"`).join(', ') %>] as const;
<% } %>
<% }); %>

constructor() {
this.prisma = new PrismaClient();
}

<% model.fields.forEach(function(field) { %>
/**
* Attribut <%= field.name %>
* Type: <%= field.type %>
* <%= field.isOptional ? 'Optionnel' : 'Obligatoire' %>
* <%= field.isUnique ? 'Unique' : '' %>
*/
<% }); %>

static validate(data: unknown) {
return this.schema.parse(data);
}

static validatePartial(data: unknown) {
return this.schema.partial().parse(data);
}
}

<%
function getZodValidator(field) {
  let validator = 'z';
  
 switch(field.type) {
    case 'String':
      validator += '.string()';
      break;
    case 'Int':
      validator += '.number().int()';
      break;
    case 'Float':
      validator += '.number()';
      break;w
    case 'Boolean':
      validator += '.boolean()';
      break;
    case 'DateTime':
      validator += '.date()';
      break;
    default:
     if (field.isRelation) {
        validator += '.object({})'; 
      } else {
        validator += '.any()';
      }
  }
  
 if (field.isUnique) {
  }
  
  if (field.isOptional) {
    validator += '.optional()';
  } 
  
  return validator;
}
%>

export default new <%= model.name %>Model();