import { PrismaClient } from '@prisma/client';
import { <%= model.name %>Model } from '../models/<%= model.name.toLowerCase() %>.model';
import { ZodError } from 'zod';

export class <%= model.name %>Service {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  async create(data: unknown) {
    try {
      const validatedData = <%= model.name %>Model.validate(data);
      
      return this.prisma.<%= model.name.toLowerCase() %>.create({ 
        data: validatedData 
      });
    } catch (error) {
      if (error instanceof ZodError) {
        throw new Error(`Validation error: ${error.message}`);
      }
      throw error;
    }
  }

  async findAll() {
    return this.prisma.<%= model.name.toLowerCase() %>.findMany();
  }

  async findById(id: string) {
    return this.prisma.<%= model.name.toLowerCase() %>.findUnique({ 
      where: { id } 
    });
  }

  async update(id: string, data: unknown) {
    try {
      // Validate update data (partial validation)
      const validatedData = <%= model.name %>Model.validatePartial(data);
      
      return this.prisma.<%= model.name.toLowerCase() %>.update({ 
        where: { id }, 
        data: validatedData
      });
    } catch (error) {
      if (error instanceof ZodError) {
        throw new Error(`Validation error: ${error.message}`);
      }
      throw error;
    }
  }

  async delete(id: string) {
    return this.prisma.<%= model.name.toLowerCase() %>.delete({ 
      where: { id } 
    });
  }
}

export default new <%= model.name %>Service();

