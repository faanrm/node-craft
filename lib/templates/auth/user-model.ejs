import { PrismaClient } from '@prisma/client';
import { z } from 'zod';
import bcrypt from 'bcrypt';

export class UserModel {
  private prisma: PrismaClient;
  
  static schema = z.object({
    email: z.string().email({ message: "Invalid email format" }),
    password: z.string().min(6, { message: "Password must be at least 6 characters" }),
    name: z.string().optional(),
    role: z.string().default("user")
  });

  static loginSchema = z.object({
    email: z.string().email({ message: "Invalid email format" }),
    password: z.string().min(1, { message: "Password is required" })
  });

  constructor() {
    this.prisma = new PrismaClient();
  }

  static validate(data: unknown) {
    return this.schema.parse(data);
  }

  static validateLogin(data: unknown) {
    return this.loginSchema.parse(data);
  }

  static async hashPassword(password: string): Promise<string> {
    return bcrypt.hash(password, 10);
  }


  static async comparePassword(password: string, hash: string): Promise<boolean> {
    return bcrypt.compare(password, hash);
  }
  static validate(data: unknown) {
    return this.schema.parse(data);
  }

  // Partial validation for updates
  static validatePartial(data: unknown) {
    return this.schema.partial().parse(data);
  }
}

export default new UserModel();