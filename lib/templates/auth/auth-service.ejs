import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';
import { UserModel } from '../models/user.model';

const prisma = new PrismaClient();

export class AuthService {
async register(userData: any) {
const validatedData = UserModel.validate(userData);

const existingUser = await prisma.user.findUnique({
where: { email: validatedData.email }
});

if (existingUser) {
throw new Error('User with this email already exists');
}

const hashedPassword = await UserModel.hashPassword(validatedData.password);

const user = await prisma.user.create({
data: {
email: validatedData.email,
password: hashedPassword,
name: validatedData.name || null,
role: validatedData.role || 'user'
}
});

return {
id: user.id,
email: user.email,
name: user.name,
role: user.role
};
}

async login(email: string, password: string) {
const user = await prisma.user.findUnique({
where: { email }
});

if (!user) {
throw new Error('Invalid email or password');
}

const isPasswordValid = await UserModel.comparePassword(password, user.password);

if (!isPasswordValid) {
throw new Error('Invalid email or password');
}

const jwtSecret = process.env.JWT_SECRET as Secret;
const jwtExpiresIn = process.env.JWT_EXPIRES_IN || '7d';

const token = jwt.sign(
{
userId: user.id,
email: user.email,
role: user.role
},
jwtSecret,
{ expiresIn: jwtExpiresIn } as SignOptions
);

return {
user: {
id: user.id,
email: user.email,
name: user.name,
role: user.role
},
token
};
}
async getUserById(userId: string) {
const user = await prisma.user.findUnique({
where: { id: userId }
});

if (!user) {
throw new Error('User not found');
}

return {
id: user.id,
email: user.email,
name: user.name,
role: user.role
};
}
}

export default new AuthService();